"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö NeuroNest
"""

from sqlalchemy import create_engine, MetaData
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.pool import StaticPool
import logging
from typing import Generator

from app.core.config import settings

logger = logging.getLogger(__name__)

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
metadata = MetaData(
    naming_convention={
        "ix": "ix_%(column_0_label)s",
        "uq": "uq_%(table_name)s_%(column_0_name)s",
        "ck": "ck_%(table_name)s_%(constraint_name)s",
        "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
        "pk": "pk_%(table_name)s"
    }
)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base(metadata=metadata)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine_kwargs = {
    "echo": settings.DEBUG,
    "pool_pre_ping": True,
    "pool_recycle": 3600,
}

# –î–ª—è PostgreSQL –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
if settings.DATABASE_URL.startswith("postgresql"):
    engine_kwargs.update({
        "pool_size": settings.DB_POOL_SIZE,
        "max_overflow": settings.DB_MAX_OVERFLOW,
        "pool_timeout": settings.DB_POOL_TIMEOUT,
    })

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞
engine = create_engine(settings.DATABASE_URL, **engine_kwargs)

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(
    autocommit=False, 
    autoflush=False, 
    bind=engine
)


def get_db() -> Generator[Session, None, None]:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ FastAPI
    """
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        logger.error(f"Database session error: {e}")
        db.rollback()
        raise
    finally:
        db.close()


async def init_db() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    """
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from app.models.user import User
        from app.models.agent import Agent, AgentExecution
        from app.models.transaction import Transaction
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await create_initial_data()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


async def create_initial_data() -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–≥–µ–Ω—Ç—ã –≤ –±–∞–∑–µ
        from app.models.agent import Agent, AgentCategory
        
        existing_agents = db.query(Agent).first()
        if not existing_agents:
            logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –∞–≥–µ–Ω—Ç–æ–≤...")
            await create_demo_agents(db)
        
        db.commit()
        db.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        if db:
            db.rollback()
            db.close()
        raise


async def create_demo_agents(db: Session) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö AI –∞–≥–µ–Ω—Ç–æ–≤
    """
    from app.models.agent import Agent, AgentCategory, AgentStatus
    
    demo_agents = [
        {
            "name": "crypto_analyzer",
            "display_name": "üí∞ Crypto Portfolio Analyzer",
            "description": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ",
            "short_description": "AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
            "category": AgentCategory.FINANCE,
            "tags": ["crypto", "portfolio", "trading", "analysis"],
            "base_price": 5 * (10 ** 9),  # 5 NOTPUNKS
            "docker_image": "neuronest/crypto-analyzer",
            "input_schema": {
                "type": "object",
                "properties": {
                    "portfolio": {"type": "string", "description": "–ü–æ—Ä—Ç—Ñ–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"},
                    "risk_level": {"type": "string", "enum": ["low", "medium", "high"], "default": "medium"}
                },
                "required": ["portfolio"]
            },
            "required_apis": ["coingecko"],
            "author": "NeuroNest Team",
            "is_featured": True
        },
        {
            "name": "nft_valuator",
            "display_name": "üé® NFT Collection Valuator",
            "description": "–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã",
            "short_description": "AI –æ—Ü–µ–Ω—â–∏–∫ NFT —Å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω",
            "category": AgentCategory.FINANCE,
            "tags": ["nft", "valuation", "trends", "opensea"],
            "base_price": 3 * (10 ** 9),  # 3 NOTPUNKS
            "docker_image": "neuronest/nft-valuator",
            "input_schema": {
                "type": "object",
                "properties": {
                    "collection_address": {"type": "string", "description": "–ê–¥—Ä–µ—Å NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏"},
                    "blockchain": {"type": "string", "enum": ["ethereum", "polygon", "ton"], "default": "ethereum"}
                },
                "required": ["collection_address"]
            },
            "required_apis": ["opensea", "alchemy"],
            "author": "NeuroNest Team",
            "is_featured": True
        },
        {
            "name": "code_reviewer",
            "display_name": "üë®‚Äçüíª AI Code Reviewer",
            "description": "–ü—Ä–æ–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è",
            "short_description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–≤—å—é–≤–µ—Ä –∫–æ–¥–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏",
            "category": AgentCategory.PRODUCTIVITY,
            "tags": ["code", "review", "analysis", "quality"],
            "base_price": 2 * (10 ** 9),  # 2 NOTPUNKS
            "docker_image": "neuronest/code-reviewer",
            "input_schema": {
                "type": "object",
                "properties": {
                    "code": {"type": "string", "description": "–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"},
                    "language": {"type": "string", "description": "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"},
                    "focus": {"type": "string", "enum": ["security", "performance", "style", "all"], "default": "all"}
                },
                "required": ["code", "language"]
            },
            "required_apis": ["openai"],
            "author": "NeuroNest Team"
        },
        {
            "name": "market_researcher",
            "display_name": "üìä Market Research Assistant",
            "description": "–ü—Ä–æ–≤–æ–¥–∏—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
            "short_description": "AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
            "category": AgentCategory.BUSINESS,
            "tags": ["market", "research", "competitors", "analysis"],
            "base_price": 7 * (10 ** 9),  # 7 NOTPUNKS
            "docker_image": "neuronest/market-researcher",
            "input_schema": {
                "type": "object",
                "properties": {
                    "industry": {"type": "string", "description": "–û—Ç—Ä–∞—Å–ª—å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"},
                    "region": {"type": "string", "description": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω"},
                    "depth": {"type": "string", "enum": ["basic", "detailed", "comprehensive"], "default": "detailed"}
                },
                "required": ["industry"]
            },
            "required_apis": ["google", "serpapi"],
            "author": "NeuroNest Team"
        },
        {
            "name": "health_advisor",
            "display_name": "üè• Personal Health Advisor",
            "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏",
            "short_description": "AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–¥–æ—Ä–æ–≤—å—è",
            "category": AgentCategory.HEALTH,
            "tags": ["health", "symptoms", "advice", "wellness"],
            "base_price": 4 * (10 ** 9),  # 4 NOTPUNKS
            "docker_image": "neuronest/health-advisor",
            "input_schema": {
                "type": "object",
                "properties": {
                    "symptoms": {"type": "string", "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤"},
                    "age": {"type": "integer", "minimum": 1, "maximum": 120},
                    "gender": {"type": "string", "enum": ["male", "female", "other"]},
                    "medical_history": {"type": "string", "description": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è"}
                },
                "required": ["symptoms"]
            },
            "required_apis": ["openai"],
            "author": "NeuroNest Team"
        },
        {
            "name": "game_strategy",
            "display_name": "üéÆ Game Strategy Optimizer",
            "description": "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ –∏–≥—Ä",
            "short_description": "AI –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
            "category": AgentCategory.GAMING,
            "tags": ["gaming", "strategy", "optimization", "tactics"],
            "base_price": 3 * (10 ** 9),  # 3 NOTPUNKS
            "docker_image": "neuronest/game-strategy",
            "input_schema": {
                "type": "object",
                "properties": {
                    "game_name": {"type": "string", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã"},
                    "game_type": {"type": "string", "enum": ["moba", "fps", "rts", "rpg", "strategy"]},
                    "current_level": {"type": "string", "description": "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞"},
                    "goals": {"type": "string", "description": "–ò–≥—Ä–æ–≤—ã–µ —Ü–µ–ª–∏"}
                },
                "required": ["game_name", "game_type"]
            },
            "required_apis": ["openai"],
            "author": "NeuroNest Team"
        }
    ]
    
    for agent_data in demo_agents:
        agent = Agent(**agent_data)
        db.add(agent)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {agent.display_name}")


def create_test_db() -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤
    """
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_engine = create_engine(
        "sqlite:///./test.db",
        connect_args={"check_same_thread": False},
        poolclass=StaticPool
    )
    
    Base.metadata.create_all(bind=test_engine)
    
    return sessionmaker(autocommit=False, autoflush=False, bind=test_engine) 