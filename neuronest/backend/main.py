"""
NeuroNest Backend API
Telegram Mini-App –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å AI –∞–≥–µ–Ω—Ç–æ–≤ —Å NFT-–¥–æ—Å—Ç—É–ø–æ–º
"""

from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
import uvicorn
import logging
from contextlib import asynccontextmanager

from app.core.config import settings
from app.core.database import init_database
from app.core.redis import init_redis
from app.core.logging import setup_logging
from app.middleware.auth import AuthMiddleware
from app.middleware.rate_limit import RateLimitMiddleware
from app.api.v1.router import api_router
from app.websocket.router import websocket_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ NeuroNest Backend...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
        await init_redis()
        logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        logger.info("üéâ NeuroNest Backend –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        yield
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã NeuroNest Backend...")


def create_app() -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    app = FastAPI(
        title="NeuroNest API",
        description="Telegram Mini-App –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å AI –∞–≥–µ–Ω—Ç–æ–≤ —Å NFT-–¥–æ—Å—Ç—É–ø–æ–º",
        version="1.0.0",
        docs_url="/docs" if settings.DEBUG else None,
        redoc_url="/redoc" if settings.DEBUG else None,
        lifespan=lifespan
    )

    # Middleware
    setup_middleware(app)
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    setup_routes(app)
    
    return app


def setup_middleware(app: FastAPI):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
    
    # CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.cors_origins_list,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Trusted hosts (–¥–ª—è production)
    if not settings.DEBUG:
        app.add_middleware(
            TrustedHostMiddleware,
            allowed_hosts=settings.allowed_hosts_list
        )
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    app.add_middleware(AuthMiddleware)
    
    # Rate limiting
    app.add_middleware(RateLimitMiddleware)


def setup_routes(app: FastAPI):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    
    # Health check
    @app.get("/health")
    async def health_check():
        return {"status": "healthy", "service": "neuronest-backend"}
    
    # API routes
    app.include_router(api_router, prefix="/api/v1")
    
    # WebSocket routes
    app.include_router(websocket_router, prefix="/ws")
    
    # Global exception handler
    @app.exception_handler(Exception)
    async def global_exception_handler(request: Request, exc: Exception):
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
        )


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_app()


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG,
        log_config=None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    ) 