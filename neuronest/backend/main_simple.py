"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è NeuroNest API –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import os
import logging
import hashlib
import hmac
import urllib.parse
from contextlib import asynccontextmanager
from typing import Dict, List, Any

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field

from ton_api import TONAPIClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Settings:
    # Telegram Bot API Token
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
    
    # TON API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    TON_API_KEY = os.getenv("TON_API_KEY", "")
    TONAPI_TOKEN = os.getenv("TONAPI_TOKEN", "")
    
    # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    DEVELOPMENT_MODE = os.getenv("DEVELOPMENT_MODE", "true").lower() == "true"
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    ALLOWED_NFT_COLLECTIONS = [
        "EQCGbQyAJxxMsYQWLCklkXQq4fkIBK3kz3GA1TkFJyUR9nTH"  # NeuroNest Access Collection
    ]

settings = Settings()

# Pydantic –º–æ–¥–µ–ª–∏
class WalletCheckRequest(BaseModel):
    wallet_address: str = Field(..., min_length=10, max_length=100)

class TelegramInitData(BaseModel):
    init_data: str
    hash: str

class AgentExecutionRequest(BaseModel):
    agent_name: str = Field(..., min_length=1, max_length=100)
    wallet_address: str = Field(..., min_length=10, max_length=100)
    parameters: Dict[str, Any] = Field(default_factory=dict)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π TON API –∫–ª–∏–µ–Ω—Ç
ton_client = TONAPIClient(
    api_key=settings.TON_API_KEY,
    tonapi_token=settings.TONAPI_TOKEN
)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ NeuroNest API –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # Startup
    try:
        logger.info("‚úÖ NeuroNest API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        yield
    finally:
        # Shutdown
        logger.info("üîÑ NeuroNest API –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="NeuroNest API",
    description="–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API –¥–ª—è Telegram Mini App —Å NFT –¥–æ—Å—Ç—É–ø–æ–º",
    version="1.0.0",
    lifespan=lifespan
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://127.0.0.1:3000", 
        "https://neuronest.app",
        "https://*.telegram.org"
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

def verify_telegram_data(init_data: str, bot_token: str = None) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp
    """
    if not bot_token or bot_token == "":
        if settings.DEVELOPMENT_MODE:
            logger.warning("üîì Development mode: –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö")
            # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
            return parse_init_data_without_verification(init_data)
        else:
            raise HTTPException(status_code=401, detail="Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    try:
        # –ü–∞—Ä—Å–∏–º init_data
        parsed_data = dict(urllib.parse.parse_qsl(init_data))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º hash
        received_hash = parsed_data.pop('hash', '')
        if not received_hash:
            raise HTTPException(status_code=401, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash –≤ –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(parsed_data.items())])
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–ª—é—á
        secret_key = hmac.new("WebAppData".encode(), bot_token.encode(), hashlib.sha256).digest()
        
        # –í—ã—á–∏—Å–ª—è–µ–º hash
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º hash
        if not hmac.compare_digest(received_hash, calculated_hash):
            raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö")
        
        return parsed_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö: {e}")
        if settings.DEVELOPMENT_MODE:
            logger.warning("üîì Development mode: fallback –∫ –ø–∞—Ä—Å–∏–Ω–≥—É –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return parse_init_data_without_verification(init_data)
        raise HTTPException(status_code=401, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

def parse_init_data_without_verification(init_data: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    try:
        parsed_data = dict(urllib.parse.parse_qsl(init_data))
        return parsed_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ init_data: {e}")
        return {"user": {"id": 12345, "first_name": "Demo", "username": "demo_user"}}

async def check_nft_ownership(wallet_address: str) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–µ NFT –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    """
    logger.info(f"Checking NFT ownership for wallet: {wallet_address}")
    logger.info(f"Allowed collections: {settings.ALLOWED_NFT_COLLECTIONS}")
    
    try:
        async with ton_client as client:
            nfts = await client.get_wallet_nfts(wallet_address)
            logger.info(f"Retrieved NFTs: {nfts}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º NFT –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
            valid_nfts = []
            for nft in nfts:
                nft_collection = nft.get("collection")
                is_verified = nft.get("verified", False)
                logger.info(f"Checking NFT: collection={nft_collection}, verified={is_verified}")
                
                if nft_collection in settings.ALLOWED_NFT_COLLECTIONS and is_verified:
                    valid_nfts.append(nft)
                    logger.info(f"Valid NFT found: {nft}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
            access_level = "none"
            has_access = len(valid_nfts) > 0
            
            if has_access:
                nft_count = len(valid_nfts)
                if nft_count >= 10:
                    access_level = "premium"
                elif nft_count >= 3:
                    access_level = "advanced"
                else:
                    access_level = "basic"
            
            result = {
                "has_access": has_access,
                "access_level": access_level,
                "nfts": valid_nfts,
                "total_nfts": len(valid_nfts),
                "all_nfts": nfts,
                "fallback_mode": len(nfts) == 1 and nfts[0].get("name", "").endswith("Pass #1"),
                "debug_info": {
                    "wallet_checked": wallet_address,
                    "allowed_collections": settings.ALLOWED_NFT_COLLECTIONS,
                    "raw_nfts_count": len(nfts),
                    "valid_nfts_count": len(valid_nfts)
                }
            }
            
            logger.info(f"Final result: {result}")
            return result
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT: {str(e)}")

# API –º–∞—Ä—à—Ä—É—Ç—ã
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return {"status": "healthy", "service": "neuronest-backend"}

@app.post("/api/v1/wallet/check-nft")
async def check_wallet_nft(request: WalletCheckRequest):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ NFT –≤ –∫–æ—à–µ–ª—å–∫–µ"""
    try:
        result = await check_nft_ownership(request.wallet_address)
        return result
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Unexpected error in check_wallet_nft: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/api/v1/wallet/{wallet_address}/nfts")
async def get_wallet_nfts(wallet_address: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö NFT –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        async with ton_client as client:
            nfts = await client.get_wallet_nfts(wallet_address)
            return {
                "wallet_address": wallet_address,
                "nfts": nfts,
                "total_count": len(nfts)
            }
    except Exception as e:
        logger.error(f"Error getting wallet NFTs: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT")

@app.post("/api/v1/telegram/verify")
async def verify_telegram(request: TelegramInitData):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
    try:
        verified_data = verify_telegram_data(request.init_data, settings.TELEGRAM_BOT_TOKEN)
        return {
            "verified": True,
            "user_data": verified_data,
            "development_mode": settings.DEVELOPMENT_MODE
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error verifying Telegram data: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

@app.post("/api/v1/agents/execute")
async def execute_agent(request: AgentExecutionRequest):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∞–≥–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT –¥–æ—Å—Ç—É–ø
        nft_check = await check_nft_ownership(request.wallet_address)
        
        if not nft_check["has_access"]:
            raise HTTPException(status_code=403, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è NFT –¥–æ—Å—Ç—É–ø")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        return {
            "status": "success",
            "agent": request.agent_name,
            "wallet": request.wallet_address,
            "access_level": nft_check["access_level"],
            "result": {
                "message": f"–ê–≥–µ–Ω—Ç {request.agent_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω",
                "execution_id": f"exec_{hash(request.wallet_address + request.agent_name)}"
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error executing agent: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞")

@app.get("/api/v1/collections/allowed")
async def get_allowed_collections():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
    return {
        "collections": [
            {
                "address": addr,
                "name": "NeuroNest Access Collection",
                "description": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ NeuroNest"
            }
            for addr in settings.ALLOWED_NFT_COLLECTIONS
        ]
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –æ—à–∏–±–æ–∫"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "message": exc.detail,
            "status_code": exc.status_code
        }
    )

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ NeuroNest API —Å–µ—Ä–≤–µ—Ä–∞...")
    logger.info(f"üîß Development mode: {settings.DEVELOPMENT_MODE}")
    logger.info(f"üîë TON API key configured: {'‚úÖ' if settings.TON_API_KEY else '‚ùå'}")
    logger.info(f"üîë TONAPI token configured: {'‚úÖ' if settings.TONAPI_TOKEN else '‚ùå'}")
    logger.info(f"ü§ñ Telegram bot configured: {'‚úÖ' if settings.TELEGRAM_BOT_TOKEN else '‚ùå'}")
    
    uvicorn.run(
        "main_simple:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 