"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è NeuroNest Backend –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from fastapi import FastAPI, HTTPException, Header
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
import json
import hmac
import hashlib
from urllib.parse import parse_qsl
from typing import Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TON API –∫–ª–∏–µ–Ω—Ç
from ton_api import ton_client

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="NeuroNest API",
    description="Telegram Mini-App –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å AI –∞–≥–µ–Ω—Ç–æ–≤ —Å NFT-–¥–æ—Å—Ç—É–ø–æ–º",
    version="1.0.0"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000", 
        "http://localhost:3001", 
        "https://neuronest.notpunks.com",
        "https://bridge.tonapi.io",
        "https://tonhub.com",
        "https://wallet.ton.org"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class TelegramUser(BaseModel):
    id: int
    first_name: str
    last_name: Optional[str] = None
    username: Optional[str] = None
    language_code: Optional[str] = None
    is_premium: Optional[bool] = False

class ExecuteAgentRequest(BaseModel):
    agent_id: str
    wallet_address: Optional[str] = None
    transaction_hash: Optional[str] = None

class NFTCheckRequest(BaseModel):
    wallet_address: str

# –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π
ALLOWED_COLLECTIONS = [
    {
        "address": "EQCGbQyAJxxMsYQWLCklkXQq4fkIBK3kz3GA1TkFJyUR9nTH",
        "name": "NeuroNest Access Collection",
        "description": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ NeuroNest"
    }
]

def verify_telegram_data(init_data: str, bot_token: str = "fake_token") -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    """
    try:
        # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if bot_token == "fake_token":
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
            parsed_data = dict(parse_qsl(init_data))
            if 'user' in parsed_data:
                user_data = json.loads(parsed_data['user'])
                return {"valid": True, "user": user_data}
            return {"valid": False}
        
        # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
        parsed_data = dict(parse_qsl(init_data))
        hash_value = parsed_data.pop('hash', '')
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(parsed_data.items())])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
        secret_key = hmac.new(b"WebAppData", bot_token.encode(), hashlib.sha256).digest()
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        
        if calculated_hash == hash_value:
            user_data = json.loads(parsed_data.get('user', '{}'))
            return {"valid": True, "user": user_data}
        
        return {"valid": False}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"valid": False}

async def check_nft_ownership(wallet_address: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è NFT –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ TON API
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
        allowed_collection_addresses = [collection["address"] for collection in ALLOWED_COLLECTIONS]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TON API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        result = await ton_client.check_collection_ownership(wallet_address, allowed_collection_addresses)
        
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT: {e}")
        # Fallback –∫ –º–æ–∫ –¥–∞–Ω–Ω—ã–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API
        return await _fallback_nft_check(wallet_address)

async def _fallback_nft_check(wallet_address: str) -> dict:
    """
    Fallback —Ñ—É–Ω–∫—Ü–∏—è —Å –º–æ–∫ –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–≥–¥–∞ TON API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    """
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–Ω—ã–π, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å NFT
    if wallet_address and len(wallet_address) > 10:
        mock_nfts = [
            {
                "collection": ALLOWED_COLLECTIONS[0]["address"],
                "token_id": "1",
                "name": "NeuroNest Access Pass #1",
                "image": "https://via.placeholder.com/300x300/00FFFF/000000?text=NEURONEST",
                "verified": True,
                "description": "Official NeuroNest Access NFT"
            }
        ]
        
        return {
            "has_access": True,
            "access_level": "basic",
            "nfts": mock_nfts,
            "total_nfts": len(mock_nfts),
            "fallback_mode": True
        }
    
    return {
        "has_access": False,
        "access_level": "none",
        "nfts": [],
        "total_nfts": 0,
        "fallback_mode": True
    }

@app.get("/")
async def root():
    return {"message": "NeuroNest Backend —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "neuronest-backend"}

@app.post("/api/v1/auth/telegram")
async def verify_telegram_auth(
    init_data: str = Header(..., alias="x-telegram-init-data")
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram WebApp"""
    result = verify_telegram_data(init_data)
    
    if not result["valid"]:
        raise HTTPException(status_code=401, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram")
    
    user = result["user"]
    return {
        "authenticated": True,
        "user": user,
        "session_token": f"session_{user['id']}_{hash(str(user))}"
    }

@app.get("/api/v1/agents")
async def get_agents():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –∞–≥–µ–Ω—Ç–æ–≤"""
    return {
        "agents": [
            {
                "id": "crypto_analyzer",
                "name": "crypto_analyzer",
                "display_name": "üí∞ Crypto Portfolio Analyzer",
                "description": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ",
                "category": "finance",
                "base_price": 5.0,
                "rating": 95,
                "total_executions": 1234,
                "required_access": "basic"
            },
            {
                "id": "nft_valuator",
                "name": "nft_valuator", 
                "display_name": "üé® NFT Collection Valuator",
                "description": "–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã",
                "category": "finance",
                "base_price": 3.0,
                "rating": 88,
                "total_executions": 856,
                "required_access": "basic"
            },
            {
                "id": "code_reviewer",
                "name": "code_reviewer",
                "display_name": "üë®‚Äçüíª AI Code Reviewer", 
                "description": "–ü—Ä–æ–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è",
                "category": "productivity",
                "base_price": 2.0,
                "rating": 92,
                "total_executions": 2156,
                "required_access": "basic"
            },
            {
                "id": "market_predictor",
                "name": "market_predictor",
                "display_name": "üìà Market Predictor Pro",
                "description": "–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò –∞–Ω–∞–ª–∏–∑–∞",
                "category": "finance",
                "base_price": 10.0,
                "rating": 97,
                "total_executions": 543,
                "required_access": "advanced"
            },
            {
                "id": "degen_advisor",
                "name": "degen_advisor",
                "display_name": "ü¶ç Degen Trade Advisor",
                "description": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
                "category": "finance",
                "base_price": 20.0,
                "rating": 89,
                "total_executions": 234,
                "required_access": "premium"
            }
        ],
        "allowed_collections": ALLOWED_COLLECTIONS
    }

@app.post("/api/v1/wallet/check-nft")
async def check_wallet_nft(request: NFTCheckRequest):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ NFT –≤ –∫–æ—à–µ–ª—å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        result = await check_nft_ownership(request.wallet_address)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT: {str(e)}")

@app.get("/api/v1/wallet/{wallet_address}/nfts")
async def get_wallet_nfts(wallet_address: str):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ NFT –≤ –∫–æ—à–µ–ª—å–∫–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ NFT —á–µ—Ä–µ–∑ TON API
        all_nfts = await ton_client.get_account_nfts(wallet_address)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
        allowed_addresses = [collection["address"] for collection in ALLOWED_COLLECTIONS]
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        allowed_nfts = [nft for nft in all_nfts if nft.get("collection") in allowed_addresses]
        other_nfts = [nft for nft in all_nfts if nft.get("collection") not in allowed_addresses]
        
        return {
            "wallet_address": wallet_address,
            "total_nfts": len(all_nfts),
            "allowed_nfts": allowed_nfts,
            "other_nfts": other_nfts,
            "has_access": len(allowed_nfts) > 0,
            "collections_summary": {
                collection["address"]: {
                    "name": collection["name"],
                    "count": len([nft for nft in allowed_nfts if nft.get("collection") == collection["address"]])
                } for collection in ALLOWED_COLLECTIONS
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT: {str(e)}")

@app.get("/api/v1/user/profile")
async def get_user_profile(
    wallet_address: Optional[str] = None,
    telegram_user_id: Optional[int] = None
):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    nft_data = {"has_access": False, "access_level": "none", "nfts": [], "total_nfts": 0}
    
    if wallet_address:
        nft_data = await check_nft_ownership(wallet_address)
    
    return {
        "user": {
            "id": telegram_user_id or 1,
            "telegram_id": telegram_user_id or 123456789,
            "username": "test_user",
            "display_name": "@test_user",
            "wallet_address": wallet_address,
            "has_nft_access": nft_data["has_access"],
            "access_level": nft_data["access_level"],
            "total_nfts": nft_data["total_nfts"],
            "agents_used_count": 5
        },
        "nfts": nft_data["nfts"]
    }

@app.post("/api/v1/agents/{agent_id}/execute")
async def execute_agent(agent_id: str, request: ExecuteAgentRequest):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∞–≥–µ–Ω—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT –¥–æ—Å—Ç—É–ø –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ—à–µ–ª–µ–∫
    if request.wallet_address:
        nft_data = await check_nft_ownership(request.wallet_address)
        if not nft_data["has_access"]:
            raise HTTPException(
                status_code=403, 
                detail="–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–≥–µ–Ω—Ç–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è NFT –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"
            )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
    agents_response = await get_agents()
    agents = agents_response["agents"]
    agent = next((a for a in agents if a["id"] == agent_id), None)
    
    if not agent:
        raise HTTPException(status_code=404, detail="–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
    if request.wallet_address:
        nft_data = await check_nft_ownership(request.wallet_address)
        user_access = nft_data["access_level"]
        required_access = agent["required_access"]
        
        access_hierarchy = {"none": 0, "basic": 1, "advanced": 2, "premium": 3}
        
        if access_hierarchy[user_access] < access_hierarchy[required_access]:
            raise HTTPException(
                status_code=403,
                detail=f"–î–ª—è —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è {required_access}"
            )
    
    # –ú–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    execution_id = f"exec_{agent_id}_{hash(str(request.dict()))}"
    
    return {
        "execution_id": execution_id,
        "status": "processing",
        "message": f"–ê–≥–µ–Ω—Ç {agent['display_name']} –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "agent": agent,
        "estimated_completion": "2-5 –º–∏–Ω—É—Ç",
        "transaction_hash": request.transaction_hash
    }

@app.get("/api/v1/executions/{execution_id}")
async def get_execution_status(execution_id: str):
    """–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    # –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞
    import random
    
    statuses = ["processing", "completed", "failed"]
    status = random.choice(statuses)
    
    result = {
        "execution_id": execution_id,
        "status": status,
        "progress": random.randint(0, 100) if status == "processing" else 100,
        "created_at": "2024-01-15T10:30:00Z",
        "updated_at": "2024-01-15T10:35:00Z"
    }
    
    if status == "completed":
        result["result"] = {
            "summary": "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "data": {
                "recommendations": [
                    "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è",
                    "–£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ–ª—é —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤",
                    "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é TON"
                ],
                "risk_score": random.randint(1, 10),
                "confidence": random.randint(70, 95)
            }
        }
    elif status == "failed":
        result["error"] = "–í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API"
    
    return result

@app.get("/api/v1/collections")
async def get_allowed_collections():
    """–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
    return {"collections": ALLOWED_COLLECTIONS}

if __name__ == "__main__":
    uvicorn.run(
        "main_simple:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    ) 